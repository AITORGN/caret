<!--begin.rcode results='hide', echo=FALSE, message=FALSE
library(caret)
library(proxy)
library(networkD3)

hook_inline = knit_hooks$get('inline')
knit_hooks$set(inline = function(x) {
  if (is.character(x)) highr::hi_html(x) else hook_inline(x)
  })
opts_chunk$set(comment=NA)

session <- paste(format(Sys.time(), "%a %b %d %Y"),
                 "using caret version",
                 packageDescription("caret")$Version,
                 "and",
                 R.Version()$version.string)

    end.rcode-->
<!--begin.rcode makeTags, results='hide', echo=FALSE, message=FALSE
modelInfo <- getModelInfo()

tags <- vector(mode = "list", length = length(modelInfo))
Classification <- Regression <- ClassProbs <- rep(NA, length = length(modelInfo))

for(i in seq(along = modelInfo)){
  tags[[i]] <- modelInfo[[i]]$tags
  Classification[i] <- ifelse("Classification" %in% modelInfo[[i]]$type, 1, 0)
  Regression[i] <- ifelse("Regression" %in% modelInfo[[i]]$type, 1, 0)
  ClassProbs[i] <- ifelse(is.null(modelInfo[[i]]$prob), 0, 1)
  names(tags)[i] <- paste(modelInfo[[i]]$label, 
                          " (", names(modelInfo)[i],
                          ")", sep = "")
}
tabs <- table(unlist(tags))
tabs <- tabs[order(tolower(names(tabs)))]

terms <- names(tabs)
terms <- terms[terms != ""]
dat <- matrix(0, ncol = length(terms), nrow = length(tags))
colnames(dat) <- terms
hasTag <- lapply(tags, function(x, y) which(y%in%x), y = terms)

for(i in seq(along = hasTag)) {
  dat[i, hasTag[[i]]] <- 1
}
dat <- cbind(Classification, Regression, dat)
rownames(dat) <- names(tags)

write.csv(dat, file = "tag_data.csv")

D <- dist(dat, method = "Jaccard")
Dm <- as.matrix(D)
sim <- 1 - Dm

grps <- rep(NA, nrow(sim))
grps[dat[,"Classification"] == 1 & dat[,"Regression"] == 1] <- 3
grps[dat[,"Classification"] == 0 & dat[,"Regression"] == 1] <- 1
grps[dat[,"Classification"] == 1 & dat[,"Regression"] == 0] <- 2


g_data <- data.frame(source_t = rownames(dat),
                     Group = grps)

id_values <- data.frame(source_t = rownames(dat))
id_values$ID <- as.numeric(id_values$source_t) - 1


###################################################################
##

cutoff <- .58
a <- b <- v <- NULL

for(i in 1:ncol(sim)) {
  tmp <- sim[-i, i]
  if(any(tmp > cutoff)) {
    value <- tmp[tmp > cutoff]
    tmp <- names(tmp)[tmp > cutoff]
    a <- c(a, rep(colnames(sim)[i], length = length(tmp)))
    b <- c(b, tmp)
    v <- c(v, value)
  } else print(colnames(sim)[i])
}

all(unique(a) %in% unique(b))

plot_dat <- data.frame(source_t = a, target_t = b, value = 1)


links <- plot_dat
links$source <- as.numeric(links$source_t) - 1
links$target <- as.numeric(links$target_t) - 1
links <- links[order(links$source, links$target),]

Nodes <- c(as.character(plot_dat$source_t), 
           as.character(plot_dat$target_t))

nodes <- data.frame(source_t = unique(Nodes))
nodes <- merge(nodes, id_values, all.x = TRUE)  
nodes <- merge(nodes, g_data, all.x = TRUE)
names(nodes)[1] <- "name"
nodes <- nodes[order(nodes$ID),]
    end.rcode-->
 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!--
    Design by Free CSS Templates
    http://www.freecsstemplates.org
    Released for free under a Creative Commons Attribution 2.5 License

    Name       : Emerald 
    Description: A two-column, fixed-width design with dark color scheme.
    Version    : 1.0
    Released   : 20120902

  -->
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="keywords" content="" />
    <meta name="description" content="" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <title>The caret Package</title>
    <link href='http://fonts.googleapis.com/css?family=Abel' rel='stylesheet' type='text/css'>
    <link href="style.css" rel="stylesheet" type="text/css" media="screen" />
  </head>
  <body>
    <div id="wrapper">
      <div id="header-wrapper" class="container">
	<div id="header" class="container">
	  <div id="logo">
	    <h1><a href="#">Models Clustered by Tag Similarity</a></h1>
	  </div>
	</div>
	<div><img src="images/img03.png" width="1000" height="40" alt="" /></div>
      </div>
      <!-- end #header -->
      <div id="page">
	<div id="content">
	
  
<p>This page shows a network diagram of all the models that can be accessed by  <a href="http://cran.r-project.org/web/packages/caret/index.html"><strong>caret's</strong></a> <span class="mx funCall">train</span> function. See the <a href="http://blog.revolutionanalytics.com/">Revolutions blog</a> for details about how this visualization was made. In summary, the package annotates each model by a set of tags (e.g. "Bagging", "L1 Regularization" etc.). Using this information we can cluster models that are similar to each other. </p>

<p>Green circles are models only used for regression, blue is classification only and orange is &ldquo;dual use&rdquo;. Hover over a circle to get the model name and the model code used by the <a href="http://cran.r-project.org/web/packages/caret/index.html"><strong>caret</strong></a> package and refreshing the screen will re-configure the layout.
</p>
<br>

    
<!--begin.rcode makeGraph, echo=FALSE, message=FALSE    
forceNetwork(Links = links, 
             Nodes = nodes,
             Source = "source",
             Target = "target", 
             Value = "value",
             Group = "Group",
             colourScale = "d3.scale.category10()",
             NodeID = "name",
             charge = -50,
             fontsize = 5,
             linkDistance = 25)
    end.rcode-->  

<br>

<p>The data used to create this graph can be found <a  href="tag_data.csv">here</a>. You can also use it along with maximum dissimilarity sampling to pick out a diverse set of models. Suppose you would like to use a SVM model with a radial basis function on some regression data. Based on these tags, what other four models would constitute the most diverse set?
</p>
<!--begin.rcode dissim, tidy = FALSE
tag <- read.csv("tag_data.csv", row.names = 1)
tag <- as.matrix(tag)

## Select only models for regression
regModels <- tag[tag[,"Regression"] == 1,]

all <- 1:nrow(regModels)
## Seed the analysis with the SVM model
start <- grep("(svmRadial)", rownames(regModels), fixed = TRUE)
pool <- all[all != start]

## Select 4 model models by maximizing the Jaccard
## dissimilarity between sets of models
nextMods <- maxDissim(regModels[start,,drop = FALSE], 
                      regModels[pool, ], 
                      method = "Jaccard",
                      n = 4)

rownames(regModels)[c(start, nextMods)]

    end.rcode-->
	</div>
	<!-- end #content -->
	<div id="sidebar">
  <ul>
  <li>
  <h2>Links</h2>
  <p><a href="modelList.html"><tt>train</tt> Model List</a></p>
  </li>
  <li>
    <h2>Topics</h2>
    <ul>
        <li><a href="index.html">Main Page</a></li>
      <li><a href="datasets.html">Data Sets</a></li>
        <li><a href="visualizations.html">Visualizations</a></li>
        <li><a href="preprocess.html">Pre-Processing</a></li>
        <li><a href="splitting.html">Data Splitting</a></li>
        <li><a href="misc.html">Miscellaneous Model Functions</a></li>
        <li><a href="training.html">Model Training and Tuning</a></li>
        <li><a href="modelList.html"><tt>train</tt> Model List</a></li>
        <li><a href="bytag.html"><tt>train</tt> Models By Tag</a></li>
        <li><a href="similarity.html"><tt>train</tt> Models By Similarity</a></li>
        <li><a href="custom_models.html">Using Custom Models</a></li>
        <li><a href="varimp.html">Variable Importance</a></li>
        <li><a href="featureselection.html">Feature Selection</a>
        <ul>
          <li><a href="rfe.html">RFE</a></li>
            <li><a href="filters.html">Filters</a></li>
            <li><a href="GA.html">GA</a></li>
            <li><a href="SA.html">SA</a></li>
        </ul></li>
        <li><a href="other.html">Other Functions</a></li>
        <li><a href="parallel.html">Parallel Processing</a></li>
        <li><a href="adaptive.html">Adaptive Resampling</a></li> 
  </ul>
  </li>
  </ul>
	</div>
	<!-- end #sidebar -->
	<div style="clear: both;">&nbsp;</div>
      </div>
      <div class="container"><img src="images/img03.png" width="1000" height="40" alt="" /></div>
      <!-- end #page -->
    </div>
    <div id="footer-content"></div>
<!--begin.rcode echo = FALSE
knit_hooks$set(inline = hook_inline)    
    end.rcode--> 
 
    <div id="footer">
      <p>Created on <!--rinline I(session) -->.</p>
    </div>
    <!-- end #footer -->
  </body>
</html>
